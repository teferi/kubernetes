// +build !ignore_autogenerated

/*
Copyright 2016 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by conversion-gen. Do not edit it manually!

package v1alpha1

import (
	api "k8s.io/kubernetes/pkg/api"
	v1 "k8s.io/kubernetes/pkg/api/v1"
	servicecatalog "k8s.io/kubernetes/pkg/apis/servicecatalog"
	conversion "k8s.io/kubernetes/pkg/conversion"
)

func init() {
	if err := api.Scheme.AddGeneratedConversionFuncs(
		Convert_v1alpha1_Catalog_To_servicecatalog_Catalog,
		Convert_servicecatalog_Catalog_To_v1alpha1_Catalog,
		Convert_v1alpha1_CatalogClaim_To_servicecatalog_CatalogClaim,
		Convert_v1alpha1_CatalogClaimList_To_servicecatalog_CatalogClaimList,
		Convert_v1alpha1_CatalogClaimSpec_To_servicecatalog_CatalogClaimSpec,
		Convert_v1alpha1_CatalogClaimStatus_To_servicecatalog_CatalogClaimStatus,
		Convert_servicecatalog_CatalogClaimStatus_To_v1alpha1_CatalogClaimStatus,
		Convert_v1alpha1_CatalogEntry_To_servicecatalog_CatalogEntry,
		Convert_v1alpha1_CatalogEntryList_To_servicecatalog_CatalogEntryList,
		Convert_v1alpha1_CatalogList_To_servicecatalog_CatalogList,
		Convert_servicecatalog_CatalogList_To_v1alpha1_CatalogList,
		Convert_v1alpha1_CatalogPosting_To_servicecatalog_CatalogPosting,
		Convert_servicecatalog_CatalogPosting_To_v1alpha1_CatalogPosting,
		Convert_v1alpha1_CatalogPostingList_To_servicecatalog_CatalogPostingList,
		Convert_servicecatalog_CatalogPostingList_To_v1alpha1_CatalogPostingList,
		Convert_v1alpha1_LocalResourceSpec_To_servicecatalog_LocalResourceSpec,
		Convert_servicecatalog_LocalResourceSpec_To_v1alpha1_LocalResourceSpec,
	); err != nil {
		// if one of the conversion functions is malformed, detect it immediately.
		panic(err)
	}
}

func autoConvert_v1alpha1_Catalog_To_servicecatalog_Catalog(in *Catalog, out *servicecatalog.Catalog, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	return nil
}

func Convert_v1alpha1_Catalog_To_servicecatalog_Catalog(in *Catalog, out *servicecatalog.Catalog, s conversion.Scope) error {
	return autoConvert_v1alpha1_Catalog_To_servicecatalog_Catalog(in, out, s)
}

func autoConvert_servicecatalog_Catalog_To_v1alpha1_Catalog(in *servicecatalog.Catalog, out *Catalog, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	return nil
}

func Convert_servicecatalog_Catalog_To_v1alpha1_Catalog(in *servicecatalog.Catalog, out *Catalog, s conversion.Scope) error {
	return autoConvert_servicecatalog_Catalog_To_v1alpha1_Catalog(in, out, s)
}

func autoConvert_v1alpha1_CatalogClaim_To_servicecatalog_CatalogClaim(in *CatalogClaim, out *servicecatalog.CatalogClaim, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	if err := Convert_v1alpha1_CatalogClaimSpec_To_servicecatalog_CatalogClaimSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	if err := Convert_v1alpha1_CatalogClaimStatus_To_servicecatalog_CatalogClaimStatus(&in.Status, &out.Status, s); err != nil {
		return err
	}
	return nil
}

func Convert_v1alpha1_CatalogClaim_To_servicecatalog_CatalogClaim(in *CatalogClaim, out *servicecatalog.CatalogClaim, s conversion.Scope) error {
	return autoConvert_v1alpha1_CatalogClaim_To_servicecatalog_CatalogClaim(in, out, s)
}

func autoConvert_v1alpha1_CatalogClaimList_To_servicecatalog_CatalogClaimList(in *CatalogClaimList, out *servicecatalog.CatalogClaimList, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := api.Convert_unversioned_ListMeta_To_unversioned_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {
		return err
	}
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]servicecatalog.CatalogClaim, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_CatalogClaim_To_servicecatalog_CatalogClaim(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_v1alpha1_CatalogClaimList_To_servicecatalog_CatalogClaimList(in *CatalogClaimList, out *servicecatalog.CatalogClaimList, s conversion.Scope) error {
	return autoConvert_v1alpha1_CatalogClaimList_To_servicecatalog_CatalogClaimList(in, out, s)
}

func autoConvert_v1alpha1_CatalogClaimSpec_To_servicecatalog_CatalogClaimSpec(in *CatalogClaimSpec, out *servicecatalog.CatalogClaimSpec, s conversion.Scope) error {
	out.Catalog = in.Catalog
	out.Entry = in.Entry
	return nil
}

func Convert_v1alpha1_CatalogClaimSpec_To_servicecatalog_CatalogClaimSpec(in *CatalogClaimSpec, out *servicecatalog.CatalogClaimSpec, s conversion.Scope) error {
	return autoConvert_v1alpha1_CatalogClaimSpec_To_servicecatalog_CatalogClaimSpec(in, out, s)
}

func autoConvert_v1alpha1_CatalogClaimStatus_To_servicecatalog_CatalogClaimStatus(in *CatalogClaimStatus, out *servicecatalog.CatalogClaimStatus, s conversion.Scope) error {
	out.State = servicecatalog.CatalogClaimState(in.State)
	if in.CreatedResources != nil {
		in, out := &in.CreatedResources, &out.CreatedResources
		*out = make([]api.ObjectReference, len(*in))
		for i := range *in {
			// TODO: Inefficient conversion - can we improve it?
			if err := s.Convert(&(*in)[i], &(*out)[i], 0); err != nil {
				return err
			}
		}
	} else {
		out.CreatedResources = nil
	}
	return nil
}

func Convert_v1alpha1_CatalogClaimStatus_To_servicecatalog_CatalogClaimStatus(in *CatalogClaimStatus, out *servicecatalog.CatalogClaimStatus, s conversion.Scope) error {
	return autoConvert_v1alpha1_CatalogClaimStatus_To_servicecatalog_CatalogClaimStatus(in, out, s)
}

func autoConvert_servicecatalog_CatalogClaimStatus_To_v1alpha1_CatalogClaimStatus(in *servicecatalog.CatalogClaimStatus, out *CatalogClaimStatus, s conversion.Scope) error {
	out.State = CatalogClaimState(in.State)
	if in.CreatedResources != nil {
		in, out := &in.CreatedResources, &out.CreatedResources
		*out = make([]v1.ObjectReference, len(*in))
		for i := range *in {
			// TODO: Inefficient conversion - can we improve it?
			if err := s.Convert(&(*in)[i], &(*out)[i], 0); err != nil {
				return err
			}
		}
	} else {
		out.CreatedResources = nil
	}
	return nil
}

func Convert_servicecatalog_CatalogClaimStatus_To_v1alpha1_CatalogClaimStatus(in *servicecatalog.CatalogClaimStatus, out *CatalogClaimStatus, s conversion.Scope) error {
	return autoConvert_servicecatalog_CatalogClaimStatus_To_v1alpha1_CatalogClaimStatus(in, out, s)
}

func autoConvert_v1alpha1_CatalogEntry_To_servicecatalog_CatalogEntry(in *CatalogEntry, out *servicecatalog.CatalogEntry, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	out.Catalog = in.Catalog
	out.Description = in.Description
	out.SourceNamespace = in.SourceNamespace
	return nil
}

func Convert_v1alpha1_CatalogEntry_To_servicecatalog_CatalogEntry(in *CatalogEntry, out *servicecatalog.CatalogEntry, s conversion.Scope) error {
	return autoConvert_v1alpha1_CatalogEntry_To_servicecatalog_CatalogEntry(in, out, s)
}

func autoConvert_v1alpha1_CatalogEntryList_To_servicecatalog_CatalogEntryList(in *CatalogEntryList, out *servicecatalog.CatalogEntryList, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := api.Convert_unversioned_ListMeta_To_unversioned_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {
		return err
	}
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]servicecatalog.CatalogEntry, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_CatalogEntry_To_servicecatalog_CatalogEntry(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_v1alpha1_CatalogEntryList_To_servicecatalog_CatalogEntryList(in *CatalogEntryList, out *servicecatalog.CatalogEntryList, s conversion.Scope) error {
	return autoConvert_v1alpha1_CatalogEntryList_To_servicecatalog_CatalogEntryList(in, out, s)
}

func autoConvert_v1alpha1_CatalogList_To_servicecatalog_CatalogList(in *CatalogList, out *servicecatalog.CatalogList, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := api.Convert_unversioned_ListMeta_To_unversioned_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {
		return err
	}
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]servicecatalog.Catalog, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_Catalog_To_servicecatalog_Catalog(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_v1alpha1_CatalogList_To_servicecatalog_CatalogList(in *CatalogList, out *servicecatalog.CatalogList, s conversion.Scope) error {
	return autoConvert_v1alpha1_CatalogList_To_servicecatalog_CatalogList(in, out, s)
}

func autoConvert_servicecatalog_CatalogList_To_v1alpha1_CatalogList(in *servicecatalog.CatalogList, out *CatalogList, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := api.Convert_unversioned_ListMeta_To_unversioned_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {
		return err
	}
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Catalog, len(*in))
		for i := range *in {
			if err := Convert_servicecatalog_Catalog_To_v1alpha1_Catalog(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_servicecatalog_CatalogList_To_v1alpha1_CatalogList(in *servicecatalog.CatalogList, out *CatalogList, s conversion.Scope) error {
	return autoConvert_servicecatalog_CatalogList_To_v1alpha1_CatalogList(in, out, s)
}

func autoConvert_v1alpha1_CatalogPosting_To_servicecatalog_CatalogPosting(in *CatalogPosting, out *servicecatalog.CatalogPosting, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	out.Catalog = in.Catalog
	out.Description = in.Description
	if in.LocalResources != nil {
		in, out := &in.LocalResources, &out.LocalResources
		*out = new(servicecatalog.LocalResourceSpec)
		if err := Convert_v1alpha1_LocalResourceSpec_To_servicecatalog_LocalResourceSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.LocalResources = nil
	}
	return nil
}

func Convert_v1alpha1_CatalogPosting_To_servicecatalog_CatalogPosting(in *CatalogPosting, out *servicecatalog.CatalogPosting, s conversion.Scope) error {
	return autoConvert_v1alpha1_CatalogPosting_To_servicecatalog_CatalogPosting(in, out, s)
}

func autoConvert_servicecatalog_CatalogPosting_To_v1alpha1_CatalogPosting(in *servicecatalog.CatalogPosting, out *CatalogPosting, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	// TODO: Inefficient conversion - can we improve it?
	if err := s.Convert(&in.ObjectMeta, &out.ObjectMeta, 0); err != nil {
		return err
	}
	out.Catalog = in.Catalog
	out.Description = in.Description
	if in.LocalResources != nil {
		in, out := &in.LocalResources, &out.LocalResources
		*out = new(LocalResourceSpec)
		if err := Convert_servicecatalog_LocalResourceSpec_To_v1alpha1_LocalResourceSpec(*in, *out, s); err != nil {
			return err
		}
	} else {
		out.LocalResources = nil
	}
	return nil
}

func Convert_servicecatalog_CatalogPosting_To_v1alpha1_CatalogPosting(in *servicecatalog.CatalogPosting, out *CatalogPosting, s conversion.Scope) error {
	return autoConvert_servicecatalog_CatalogPosting_To_v1alpha1_CatalogPosting(in, out, s)
}

func autoConvert_v1alpha1_CatalogPostingList_To_servicecatalog_CatalogPostingList(in *CatalogPostingList, out *servicecatalog.CatalogPostingList, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := api.Convert_unversioned_ListMeta_To_unversioned_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {
		return err
	}
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]servicecatalog.CatalogPosting, len(*in))
		for i := range *in {
			if err := Convert_v1alpha1_CatalogPosting_To_servicecatalog_CatalogPosting(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_v1alpha1_CatalogPostingList_To_servicecatalog_CatalogPostingList(in *CatalogPostingList, out *servicecatalog.CatalogPostingList, s conversion.Scope) error {
	return autoConvert_v1alpha1_CatalogPostingList_To_servicecatalog_CatalogPostingList(in, out, s)
}

func autoConvert_servicecatalog_CatalogPostingList_To_v1alpha1_CatalogPostingList(in *servicecatalog.CatalogPostingList, out *CatalogPostingList, s conversion.Scope) error {
	if err := api.Convert_unversioned_TypeMeta_To_unversioned_TypeMeta(&in.TypeMeta, &out.TypeMeta, s); err != nil {
		return err
	}
	if err := api.Convert_unversioned_ListMeta_To_unversioned_ListMeta(&in.ListMeta, &out.ListMeta, s); err != nil {
		return err
	}
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]CatalogPosting, len(*in))
		for i := range *in {
			if err := Convert_servicecatalog_CatalogPosting_To_v1alpha1_CatalogPosting(&(*in)[i], &(*out)[i], s); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_servicecatalog_CatalogPostingList_To_v1alpha1_CatalogPostingList(in *servicecatalog.CatalogPostingList, out *CatalogPostingList, s conversion.Scope) error {
	return autoConvert_servicecatalog_CatalogPostingList_To_v1alpha1_CatalogPostingList(in, out, s)
}

func autoConvert_v1alpha1_LocalResourceSpec_To_servicecatalog_LocalResourceSpec(in *LocalResourceSpec, out *servicecatalog.LocalResourceSpec, s conversion.Scope) error {
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]api.ObjectReference, len(*in))
		for i := range *in {
			// TODO: Inefficient conversion - can we improve it?
			if err := s.Convert(&(*in)[i], &(*out)[i], 0); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_v1alpha1_LocalResourceSpec_To_servicecatalog_LocalResourceSpec(in *LocalResourceSpec, out *servicecatalog.LocalResourceSpec, s conversion.Scope) error {
	return autoConvert_v1alpha1_LocalResourceSpec_To_servicecatalog_LocalResourceSpec(in, out, s)
}

func autoConvert_servicecatalog_LocalResourceSpec_To_v1alpha1_LocalResourceSpec(in *servicecatalog.LocalResourceSpec, out *LocalResourceSpec, s conversion.Scope) error {
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]v1.ObjectReference, len(*in))
		for i := range *in {
			// TODO: Inefficient conversion - can we improve it?
			if err := s.Convert(&(*in)[i], &(*out)[i], 0); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func Convert_servicecatalog_LocalResourceSpec_To_v1alpha1_LocalResourceSpec(in *servicecatalog.LocalResourceSpec, out *LocalResourceSpec, s conversion.Scope) error {
	return autoConvert_servicecatalog_LocalResourceSpec_To_v1alpha1_LocalResourceSpec(in, out, s)
}
