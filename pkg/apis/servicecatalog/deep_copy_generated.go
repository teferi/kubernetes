// +build !ignore_autogenerated

/*
Copyright 2016 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by deepcopy-gen. Do not edit it manually!

package servicecatalog

import (
	api "k8s.io/kubernetes/pkg/api"
	unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	conversion "k8s.io/kubernetes/pkg/conversion"
)

func init() {
	if err := api.Scheme.AddGeneratedDeepCopyFuncs(
		DeepCopy_servicecatalog_Catalog,
		DeepCopy_servicecatalog_CatalogClaim,
		DeepCopy_servicecatalog_CatalogClaimList,
		DeepCopy_servicecatalog_CatalogClaimSpec,
		DeepCopy_servicecatalog_CatalogClaimStatus,
		DeepCopy_servicecatalog_CatalogEntry,
		DeepCopy_servicecatalog_CatalogEntryList,
		DeepCopy_servicecatalog_CatalogList,
		DeepCopy_servicecatalog_CatalogPosting,
		DeepCopy_servicecatalog_CatalogPostingList,
	); err != nil {
		// if one of the deep copy functions is malformed, detect it immediately.
		panic(err)
	}
}

func DeepCopy_servicecatalog_Catalog(in Catalog, out *Catalog, c *conversion.Cloner) error {
	if err := unversioned.DeepCopy_unversioned_TypeMeta(in.TypeMeta, &out.TypeMeta, c); err != nil {
		return err
	}
	if err := api.DeepCopy_api_ObjectMeta(in.ObjectMeta, &out.ObjectMeta, c); err != nil {
		return err
	}
	return nil
}

func DeepCopy_servicecatalog_CatalogClaim(in CatalogClaim, out *CatalogClaim, c *conversion.Cloner) error {
	if err := unversioned.DeepCopy_unversioned_TypeMeta(in.TypeMeta, &out.TypeMeta, c); err != nil {
		return err
	}
	if err := api.DeepCopy_api_ObjectMeta(in.ObjectMeta, &out.ObjectMeta, c); err != nil {
		return err
	}
	if err := DeepCopy_servicecatalog_CatalogClaimSpec(in.Spec, &out.Spec, c); err != nil {
		return err
	}
	if err := DeepCopy_servicecatalog_CatalogClaimStatus(in.Status, &out.Status, c); err != nil {
		return err
	}
	return nil
}

func DeepCopy_servicecatalog_CatalogClaimList(in CatalogClaimList, out *CatalogClaimList, c *conversion.Cloner) error {
	if err := unversioned.DeepCopy_unversioned_TypeMeta(in.TypeMeta, &out.TypeMeta, c); err != nil {
		return err
	}
	if err := unversioned.DeepCopy_unversioned_ListMeta(in.ListMeta, &out.ListMeta, c); err != nil {
		return err
	}
	if in.Items != nil {
		in, out := in.Items, &out.Items
		*out = make([]CatalogClaim, len(in))
		for i := range in {
			if err := DeepCopy_servicecatalog_CatalogClaim(in[i], &(*out)[i], c); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func DeepCopy_servicecatalog_CatalogClaimSpec(in CatalogClaimSpec, out *CatalogClaimSpec, c *conversion.Cloner) error {
	out.Catalog = in.Catalog
	out.Entry = in.Entry
	return nil
}

func DeepCopy_servicecatalog_CatalogClaimStatus(in CatalogClaimStatus, out *CatalogClaimStatus, c *conversion.Cloner) error {
	out.State = in.State
	if in.CreatedResources != nil {
		in, out := in.CreatedResources, &out.CreatedResources
		*out = make([]api.ObjectReference, len(in))
		for i := range in {
			if err := api.DeepCopy_api_ObjectReference(in[i], &(*out)[i], c); err != nil {
				return err
			}
		}
	} else {
		out.CreatedResources = nil
	}
	return nil
}

func DeepCopy_servicecatalog_CatalogEntry(in CatalogEntry, out *CatalogEntry, c *conversion.Cloner) error {
	if err := unversioned.DeepCopy_unversioned_TypeMeta(in.TypeMeta, &out.TypeMeta, c); err != nil {
		return err
	}
	if err := api.DeepCopy_api_ObjectMeta(in.ObjectMeta, &out.ObjectMeta, c); err != nil {
		return err
	}
	out.Catalog = in.Catalog
	out.Description = in.Description
	out.SourceNamespace = in.SourceNamespace
	if in.Output != nil {
		in, out := in.Output, &out.Output
		*out = make([]api.ObjectReference, len(in))
		for i := range in {
			if err := api.DeepCopy_api_ObjectReference(in[i], &(*out)[i], c); err != nil {
				return err
			}
		}
	} else {
		out.Output = nil
	}
	return nil
}

func DeepCopy_servicecatalog_CatalogEntryList(in CatalogEntryList, out *CatalogEntryList, c *conversion.Cloner) error {
	if err := unversioned.DeepCopy_unversioned_TypeMeta(in.TypeMeta, &out.TypeMeta, c); err != nil {
		return err
	}
	if err := unversioned.DeepCopy_unversioned_ListMeta(in.ListMeta, &out.ListMeta, c); err != nil {
		return err
	}
	if in.Items != nil {
		in, out := in.Items, &out.Items
		*out = make([]CatalogEntry, len(in))
		for i := range in {
			if err := DeepCopy_servicecatalog_CatalogEntry(in[i], &(*out)[i], c); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func DeepCopy_servicecatalog_CatalogList(in CatalogList, out *CatalogList, c *conversion.Cloner) error {
	if err := unversioned.DeepCopy_unversioned_TypeMeta(in.TypeMeta, &out.TypeMeta, c); err != nil {
		return err
	}
	if err := unversioned.DeepCopy_unversioned_ListMeta(in.ListMeta, &out.ListMeta, c); err != nil {
		return err
	}
	if in.Items != nil {
		in, out := in.Items, &out.Items
		*out = make([]Catalog, len(in))
		for i := range in {
			if err := DeepCopy_servicecatalog_Catalog(in[i], &(*out)[i], c); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func DeepCopy_servicecatalog_CatalogPosting(in CatalogPosting, out *CatalogPosting, c *conversion.Cloner) error {
	if err := unversioned.DeepCopy_unversioned_TypeMeta(in.TypeMeta, &out.TypeMeta, c); err != nil {
		return err
	}
	if err := api.DeepCopy_api_ObjectMeta(in.ObjectMeta, &out.ObjectMeta, c); err != nil {
		return err
	}
	out.Catalog = in.Catalog
	out.Description = in.Description
	if in.Data != nil {
		in, out := in.Data, &out.Data
		*out = make(map[string]string)
		for key, val := range in {
			(*out)[key] = val
		}
	} else {
		out.Data = nil
	}
	return nil
}

func DeepCopy_servicecatalog_CatalogPostingList(in CatalogPostingList, out *CatalogPostingList, c *conversion.Cloner) error {
	if err := unversioned.DeepCopy_unversioned_TypeMeta(in.TypeMeta, &out.TypeMeta, c); err != nil {
		return err
	}
	if err := unversioned.DeepCopy_unversioned_ListMeta(in.ListMeta, &out.ListMeta, c); err != nil {
		return err
	}
	if in.Items != nil {
		in, out := in.Items, &out.Items
		*out = make([]CatalogPosting, len(in))
		for i := range in {
			if err := DeepCopy_servicecatalog_CatalogPosting(in[i], &(*out)[i], c); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}
