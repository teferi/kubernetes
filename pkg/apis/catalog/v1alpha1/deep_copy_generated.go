// +build !ignore_autogenerated

/*
Copyright 2016 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by deepcopy-gen. Do not edit it manually!

package v1alpha1

import (
	api "k8s.io/kubernetes/pkg/api"
	unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	v1 "k8s.io/kubernetes/pkg/api/v1"
	conversion "k8s.io/kubernetes/pkg/conversion"
)

func init() {
	if err := api.Scheme.AddGeneratedDeepCopyFuncs(
		DeepCopy_v1alpha1_Catalog,
		DeepCopy_v1alpha1_CatalogEntry,
		DeepCopy_v1alpha1_CatalogEntryClaim,
		DeepCopy_v1alpha1_CatalogEntryClaimList,
		DeepCopy_v1alpha1_CatalogEntryClaimSpec,
		DeepCopy_v1alpha1_CatalogEntryClaimStatus,
		DeepCopy_v1alpha1_CatalogEntryList,
		DeepCopy_v1alpha1_CatalogList,
	); err != nil {
		// if one of the deep copy functions is malformed, detect it immediately.
		panic(err)
	}
}

func DeepCopy_v1alpha1_Catalog(in Catalog, out *Catalog, c *conversion.Cloner) error {
	if err := unversioned.DeepCopy_unversioned_TypeMeta(in.TypeMeta, &out.TypeMeta, c); err != nil {
		return err
	}
	if err := v1.DeepCopy_v1_ObjectMeta(in.ObjectMeta, &out.ObjectMeta, c); err != nil {
		return err
	}
	return nil
}

func DeepCopy_v1alpha1_CatalogEntry(in CatalogEntry, out *CatalogEntry, c *conversion.Cloner) error {
	if err := unversioned.DeepCopy_unversioned_TypeMeta(in.TypeMeta, &out.TypeMeta, c); err != nil {
		return err
	}
	if err := v1.DeepCopy_v1_ObjectMeta(in.ObjectMeta, &out.ObjectMeta, c); err != nil {
		return err
	}
	if err := v1.DeepCopy_v1_LocalObjectReference(in.Catalog, &out.Catalog, c); err != nil {
		return err
	}
	out.Description = in.Description
	if err := v1.DeepCopy_v1_ObjectReference(in.Reference, &out.Reference, c); err != nil {
		return err
	}
	if in.Data != nil {
		in, out := in.Data, &out.Data
		*out = make(map[string]string)
		for key, val := range in {
			(*out)[key] = val
		}
	} else {
		out.Data = nil
	}
	return nil
}

func DeepCopy_v1alpha1_CatalogEntryClaim(in CatalogEntryClaim, out *CatalogEntryClaim, c *conversion.Cloner) error {
	if err := unversioned.DeepCopy_unversioned_TypeMeta(in.TypeMeta, &out.TypeMeta, c); err != nil {
		return err
	}
	if err := v1.DeepCopy_v1_ObjectMeta(in.ObjectMeta, &out.ObjectMeta, c); err != nil {
		return err
	}
	if err := DeepCopy_v1alpha1_CatalogEntryClaimSpec(in.Spec, &out.Spec, c); err != nil {
		return err
	}
	if err := DeepCopy_v1alpha1_CatalogEntryClaimStatus(in.Status, &out.Status, c); err != nil {
		return err
	}
	return nil
}

func DeepCopy_v1alpha1_CatalogEntryClaimList(in CatalogEntryClaimList, out *CatalogEntryClaimList, c *conversion.Cloner) error {
	if err := unversioned.DeepCopy_unversioned_TypeMeta(in.TypeMeta, &out.TypeMeta, c); err != nil {
		return err
	}
	if err := unversioned.DeepCopy_unversioned_ListMeta(in.ListMeta, &out.ListMeta, c); err != nil {
		return err
	}
	if in.Items != nil {
		in, out := in.Items, &out.Items
		*out = make([]CatalogEntryClaim, len(in))
		for i := range in {
			if err := DeepCopy_v1alpha1_CatalogEntryClaim(in[i], &(*out)[i], c); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func DeepCopy_v1alpha1_CatalogEntryClaimSpec(in CatalogEntryClaimSpec, out *CatalogEntryClaimSpec, c *conversion.Cloner) error {
	out.Catalog = in.Catalog
	out.Entry = in.Entry
	return nil
}

func DeepCopy_v1alpha1_CatalogEntryClaimStatus(in CatalogEntryClaimStatus, out *CatalogEntryClaimStatus, c *conversion.Cloner) error {
	out.State = in.State
	if in.ProvisionedItems != nil {
		in, out := in.ProvisionedItems, &out.ProvisionedItems
		*out = make([]v1.ObjectReference, len(in))
		for i := range in {
			if err := v1.DeepCopy_v1_ObjectReference(in[i], &(*out)[i], c); err != nil {
				return err
			}
		}
	} else {
		out.ProvisionedItems = nil
	}
	return nil
}

func DeepCopy_v1alpha1_CatalogEntryList(in CatalogEntryList, out *CatalogEntryList, c *conversion.Cloner) error {
	if err := unversioned.DeepCopy_unversioned_TypeMeta(in.TypeMeta, &out.TypeMeta, c); err != nil {
		return err
	}
	if err := unversioned.DeepCopy_unversioned_ListMeta(in.ListMeta, &out.ListMeta, c); err != nil {
		return err
	}
	if in.Items != nil {
		in, out := in.Items, &out.Items
		*out = make([]CatalogEntry, len(in))
		for i := range in {
			if err := DeepCopy_v1alpha1_CatalogEntry(in[i], &(*out)[i], c); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}

func DeepCopy_v1alpha1_CatalogList(in CatalogList, out *CatalogList, c *conversion.Cloner) error {
	if err := unversioned.DeepCopy_unversioned_TypeMeta(in.TypeMeta, &out.TypeMeta, c); err != nil {
		return err
	}
	if err := unversioned.DeepCopy_unversioned_ListMeta(in.ListMeta, &out.ListMeta, c); err != nil {
		return err
	}
	if in.Items != nil {
		in, out := in.Items, &out.Items
		*out = make([]Catalog, len(in))
		for i := range in {
			if err := DeepCopy_v1alpha1_Catalog(in[i], &(*out)[i], c); err != nil {
				return err
			}
		}
	} else {
		out.Items = nil
	}
	return nil
}
